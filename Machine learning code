# malicious_url_detector.py

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split

def makeTokens(f):
    # Your tokenization logic here
  tkns_BySlash = str(f.encode('utf-8')).split('/')	# make tokens after splitting by slash
  total_Tokens = []
  for i in tkns_BySlash:
      tokens = str(i).split('-')	# make tokens after splitting by dash
      tkns_ByDot = []
      for j in range(0,len(tokens)):
          temp_Tokens = str(tokens[j]).split('.')	# make tokens after splitting by dot
          tkns_ByDot = tkns_ByDot + temp_Tokens
      total_Tokens = total_Tokens + tokens + tkns_ByDot
  total_Tokens = list(set(total_Tokens))	#remove redundant tokens
  if 'com' in total_Tokens:
      total_Tokens.remove('com')	#removing .com since it occurs a lot of times and it should not be included in our features
  return total_Tokens

# Load URL data
urls_data = pd.read_csv("urldata.csv")

# Labels
y = urls_data["label"]

# Features
url_list = urls_data["url"]

# Using Custom Tokenizer
vectorizer = TfidfVectorizer(tokenizer=makeTokens)

# Store vectors into X variable as Our XFeatures
X = vectorizer.fit_transform(url_list)

# Split into training and testing dataset 80/20 ratio
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model Building
logit = LogisticRegression()
logit.fit(X_train, y_train)

  def predict_url(url):
    # Tokenize the input URL using the same function used during training
    tokens = makeTokens(url)

    # Combine tokens into a string, as TfidfVectorizer expects iterable of strings
    url_transformed = ' '.join(tokens)

    # Transform the input URL using the trained vectorizer
    X_predict = vectorizer.transform([url_transformed])

    # Predict using the trained model
    prediction = logit.predict(X_predict)

    return prediction[0]